import numpy as np
import scipy.special as sp
import tensorflow as tf

gl_nodes = {
    2: [-0.5773502691896257645092, 0.5773502691896257645092],
    3: [-0.7745966692414833770359, 0, 0.7745966692414833770359],
    4: [-0.861136311594052575224, -0.3399810435848562648027,
        0.3399810435848562648027, 0.861136311594052575224],
    5: [-0.9061798459386639927976, -0.5384693101056830910363, 0,
        0.5384693101056830910363, 0.9061798459386639927976],
    10: [-0.973906528517171720078, -0.8650633666889845107321,
         -0.6794095682990244062343, -0.4333953941292471907993,
         -0.1488743389816312108848, 0.1488743389816312108848,
         0.4333953941292471907993, 0.6794095682990244062343,
         0.8650633666889845107321, 0.973906528517171720078],
    32: [-0.997263861849481563545, -0.9856115115452683354002,
         -0.9647622555875064307738, -0.9349060759377396891709,
         -0.8963211557660521239653, -0.8493676137325699701337,
         -0.794483795967942406963, -0.7321821187402896803874,
         -0.6630442669302152009751, -0.5877157572407623290408,
         -0.5068999089322293900238, -0.421351276130635345364,
         -0.3318686022821276497799, -0.2392873622521370745446,
         -0.1444719615827964934852, -0.0483076656877383162348,
         0.048307665687738316235, 0.1444719615827964934852,
         0.2392873622521370745446, 0.33186860228212764978,
         0.4213512761306353453641, 0.5068999089322293900238,
         0.5877157572407623290408, 0.6630442669302152009751,
         0.7321821187402896803874, 0.7944837959679424069631,
         0.8493676137325699701337, 0.8963211557660521239653,
         0.9349060759377396891709, 0.9647622555875064307738,
         0.9856115115452683354002, 0.997263861849481563545],
}

gl_weights = {
    2: [1, 1],
    3: [0.5555555555555555555556, 0.8888888888888888888889,
        0.555555555555555555556],
    4: [0.3478548451374538573731, 0.6521451548625461426269,
        0.6521451548625461426269, 0.3478548451374538573731],
    5: [0.2369268850561890875143, 0.4786286704993664680413,
        0.5688888888888888888889, 0.4786286704993664680413,
        0.2369268850561890875143],
    10: [0.0666713443086881375936, 0.149451349150580593146,
         0.219086362515982043996, 0.2692667193099963550912,
         0.2955242247147528701739, 0.295524224714752870174,
         0.269266719309996355091, 0.2190863625159820439955,
         0.1494513491505805931458, 0.0666713443086881375936],
    32: [0.0070186100094700966004, 0.0162743947309056706052,
         0.0253920653092620594558, 0.0342738629130214331027,
         0.0428358980222266806569, 0.050998059262376176196,
         0.0586840934785355471453, 0.065822222776361846838,
         0.072345794108848506225, 0.0781938957870703064717,
         0.0833119242269467552222, 0.087652093004403811143,
         0.091173878695763884713, 0.09384439908080456563918,
         0.0956387200792748594191, 0.0965400885147278005668,
         0.0965400885147278005668, 0.0956387200792748594191,
         0.0938443990808045656392, 0.091173878695763884713,
         0.0876520930044038111428, 0.083311924226946755222,
         0.078193895787070306472, 0.072345794108848506225,
         0.065822222776361846838, 0.0586840934785355471453,
         0.0509980592623761761962, 0.0428358980222266806569,
         0.0342738629130214331027, 0.0253920653092620594558,
         0.0162743947309056706052, 0.0070186100094700966004]
}


class IRK:
    def __init__(self, order):
        self.order = int(order)
        self.nodes = self.get_nodes()
        self.weights = self.get_weights()

        # build RK coefficient matrix
        self.rk_matrix = None
        self.build_matrix()
        self.rk_matrix_tf32 = tf.convert_to_tensor(self.rk_matrix.T, dtype=tf.float32)

    def get_nodes(self):
        nodes = gl_nodes.get(self.order, "nothing")
        return nodes

    def get_weights(self):
        weights = gl_weights.get(self.order, "nothing")
        return weights

    def build_matrix(self):
        self.rk_matrix = np.zeros((self.order + 1, self.order + 1))
        self.rk_matrix[:-1, :-1] = np.array([[0.5 * self.weights[i] * sum(self.series(s, i, j)
                                                                          for s in range(self.order))
                                    + self.weights[i] / 2.0
                                    for i in range(self.order)]
                                   for j in range(self.order)])
        self.rk_matrix[-1, :-1] = 0.5 * np.array(self.weights)
        # self.rk_matrix[:-1, -1] = self.weights
        # print(self.rk_matrix)

    def series(self, s, i, j):
        return 0.5 * sp.eval_legendre(s, self.nodes[i]) * (sp.eval_legendre(s + 1, self.nodes[j])
                                                           - sp.eval_legendre(s - 1, self.nodes[j]))
